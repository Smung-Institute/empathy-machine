{"version":3,"sources":["particles.js"],"names":["particleVertexShader","join","particleFragmentShader","Tween","timeArray","valueArray","times","values","prototype","lerp","t","i","n","length","p","THREE","Vector3","clone","Particle","position","velocity","acceleration","angle","angleVelocity","angleAcceleration","size","color","Color","opacity","age","alive","update","dt","add","multiplyScalar","sizeTween","colorTween","colorHSL","setHSL","x","y","z","opacityTween","Type","Object","freeze","ParticleEngine","positionStyle","CUBE","positionBase","positionSpread","positionRadius","velocityStyle","velocityBase","velocitySpread","speedBase","speedSpread","accelerationBase","accelerationSpread","angleBase","angleSpread","angleVelocityBase","angleVelocitySpread","angleAccelerationBase","angleAccelerationSpread","sizeBase","sizeSpread","colorBase","colorSpread","opacityBase","opacitySpread","blendStyle","NormalBlending","particleArray","particlesPerSecond","particleDeathAge","emitterAge","emitterAlive","emitterDeathAge","particleCount","Math","min","particleGeometry","Geometry","particleTexture","particleMaterial","ShaderMaterial","uniforms","texture","type","value","attributes","customVisible","customAngle","customSize","customColor","customOpacity","vertexShader","fragmentShader","transparent","blending","depthTest","particleMesh","Mesh","setValues","parameters","undefined","key","alphaTest","ParticleSystem","randomValue","base","spread","random","randomVector3","rand3","addVectors","multiplyVectors","createParticle","particle","SPHERE","r","sqrt","vec3","cos","sin","direction","subVectors","speed","normalize","initialize","vertices","dynamic","sortParticles","scene","recycleIndices","push","startIndex","round","endIndex","j","destroy","remove"],"mappings":"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","file":"particles.640c18c4.js","sourceRoot":"..","sourcesContent":["/**\n* @author Lee Stemkoski   http://www.adelphi.edu/~stemkoski/\n*/\n\n///////////////////////////////////////////////////////////////////////////////\n\n/////////////\n// SHADERS //\n/////////////\n\n// attribute: data that may be different for each particle (such as size and color);\n//      can only be used in vertex shader\n// varying: used to communicate data from vertex shader to fragment shader\n// uniform: data that is the same for each particle (such as texture)\n\nparticleVertexShader =\n    [\n        \"attribute vec3  customColor;\",\n        \"attribute float customOpacity;\",\n        \"attribute float customSize;\",\n        \"attribute float customAngle;\",\n        \"attribute float customVisible;\",  // float used as boolean (0 = false, 1 = true)\n        \"varying vec4  vColor;\",\n        \"varying float vAngle;\",\n        \"void main()\",\n        \"{\",\n        \"if ( customVisible > 0.5 )\", \t\t\t\t// true\n        \"vColor = vec4( customColor, customOpacity );\", //     set color associated to vertex; use later in fragment shader.\n        \"else\",\t\t\t\t\t\t\t// false\n        \"vColor = vec4(0.0, 0.0, 0.0, 0.0);\", \t\t//     make particle invisible.\n\n        \"vAngle = customAngle;\",\n\n        \"vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\",\n        \"gl_PointSize = customSize * ( 300.0 / length( mvPosition.xyz ) );\",     // scale particles as objects in 3D space\n        \"gl_Position = projectionMatrix * mvPosition;\",\n        \"}\"\n    ].join(\"\\n\");\n\nparticleFragmentShader =\n    [\n        \"uniform sampler2D texture;\",\n        \"varying vec4 vColor;\",\n        \"varying float vAngle;\",\n        \"void main()\",\n        \"{\",\n        \"gl_FragColor = vColor;\",\n\n        \"float c = cos(vAngle);\",\n        \"float s = sin(vAngle);\",\n        \"vec2 rotatedUV = vec2(c * (gl_PointCoord.x - 0.5) + s * (gl_PointCoord.y - 0.5) + 0.5,\",\n        \"c * (gl_PointCoord.y - 0.5) - s * (gl_PointCoord.x - 0.5) + 0.5);\",  // rotate UV coordinates to rotate texture\n        \"vec4 rotatedTexture = texture2D( texture,  rotatedUV );\",\n        \"gl_FragColor = gl_FragColor * rotatedTexture;\",    // sets an otherwise white particle texture to desired color\n        \"}\"\n    ].join(\"\\n\");\n\n///////////////////////////////////////////////////////////////////////////////\n\n/////////////////\n// TWEEN CLASS //\n/////////////////\n\nfunction Tween(timeArray, valueArray) {\n    this.times = timeArray || [];\n    this.values = valueArray || [];\n}\n\nTween.prototype.lerp = function (t) {\n    var i = 0;\n    var n = this.times.length;\n    while (i < n && t > this.times[i])\n        i++;\n    if (i == 0) return this.values[0];\n    if (i == n) return this.values[n - 1];\n    var p = (t - this.times[i - 1]) / (this.times[i] - this.times[i - 1]);\n    if (this.values[0] instanceof THREE.Vector3)\n        return this.values[i - 1].clone().lerp(this.values[i], p);\n    else // its a float\n        return this.values[i - 1] + p * (this.values[i] - this.values[i - 1]);\n}\n\n///////////////////////////////////////////////////////////////////////////////\n\n////////////////////\n// PARTICLE CLASS //\n////////////////////\n\nfunction Particle() {\n    this.position = new THREE.Vector3();\n    this.velocity = new THREE.Vector3(); // units per second\n    this.acceleration = new THREE.Vector3();\n\n    this.angle = 0;\n    this.angleVelocity = 0; // degrees per second\n    this.angleAcceleration = 0; // degrees per second, per second\n\n    this.size = 16.0;\n\n    this.color = new THREE.Color();\n    this.opacity = 1.0;\n\n    this.age = 0;\n    this.alive = 0; // use float instead of boolean for shader purposes\t\n}\n\nParticle.prototype.update = function (dt) {\n    this.position.add(this.velocity.clone().multiplyScalar(dt));\n    this.velocity.add(this.acceleration.clone().multiplyScalar(dt));\n\n    // convert from degrees to radians: 0.01745329251 = Math.PI/180\n    this.angle += this.angleVelocity * 0.01745329251 * dt;\n    this.angleVelocity += this.angleAcceleration * 0.01745329251 * dt;\n\n    this.age += dt;\n\n    // if the tween for a given attribute is nonempty,\n    //  then use it to update the attribute's value\n\n    if (this.sizeTween.times.length > 0)\n        this.size = this.sizeTween.lerp(this.age);\n\n    if (this.colorTween.times.length > 0) {\n        var colorHSL = this.colorTween.lerp(this.age);\n        this.color = new THREE.Color().setHSL(colorHSL.x, colorHSL.y, colorHSL.z);\n    }\n\n    if (this.opacityTween.times.length > 0)\n        this.opacity = this.opacityTween.lerp(this.age);\n}\n\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////\n// PARTICLE ENGINE CLASS //\n///////////////////////////\n\nvar Type = Object.freeze({ \"CUBE\": 1, \"SPHERE\": 2 });\n\nfunction ParticleEngine() {\n    /////////////////////////\n    // PARTICLE PROPERTIES //\n    /////////////////////////\n\n    this.positionStyle = Type.CUBE;\n    this.positionBase = new THREE.Vector3();\n    // cube shape data\n    this.positionSpread = new THREE.Vector3();\n    // sphere shape data\n    this.positionRadius = 0; // distance from base at which particles start\n\n    this.velocityStyle = Type.CUBE;\n    // cube movement data\n    this.velocityBase = new THREE.Vector3();\n    this.velocitySpread = new THREE.Vector3();\n    // sphere movement data\n    //   direction vector calculated using initial position\n    this.speedBase = 0;\n    this.speedSpread = 0;\n\n    this.accelerationBase = new THREE.Vector3();\n    this.accelerationSpread = new THREE.Vector3();\n\n    this.angleBase = 0;\n    this.angleSpread = 0;\n    this.angleVelocityBase = 0;\n    this.angleVelocitySpread = 0;\n    this.angleAccelerationBase = 0;\n    this.angleAccelerationSpread = 0;\n\n    this.sizeBase = 0.0;\n    this.sizeSpread = 0.0;\n    this.sizeTween = new Tween();\n\n    // store colors in HSL format in a THREE.Vector3 object\n    // http://en.wikipedia.org/wiki/HSL_and_HSV\n    this.colorBase = new THREE.Vector3(0.0, 1.0, 0.5);\n    this.colorSpread = new THREE.Vector3(0.0, 0.0, 0.0);\n    this.colorTween = new Tween();\n\n    this.opacityBase = 1.0;\n    this.opacitySpread = 0.0;\n    this.opacityTween = new Tween();\n\n    this.blendStyle = THREE.NormalBlending; // false;\n\n    this.particleArray = [];\n    this.particlesPerSecond = 100;\n    this.particleDeathAge = 1.0;\n\n    ////////////////////////\n    // EMITTER PROPERTIES //\n    ////////////////////////\n\n    this.emitterAge = 0.0;\n    this.emitterAlive = true;\n    this.emitterDeathAge = 60; // time (seconds) at which to stop creating particles.\n\n    // How many particles could be active at any time?\n    this.particleCount = this.particlesPerSecond * Math.min(this.particleDeathAge, this.emitterDeathAge);\n\n    //////////////\n    // THREE.JS //\n    //////////////\n\n    this.particleGeometry = new THREE.Geometry();\n    this.particleTexture = null;\n    this.particleMaterial = new THREE.ShaderMaterial(\n        {\n            uniforms:\n            {\n                texture: { type: \"t\", value: this.particleTexture },\n            },\n            attributes:\n            {\n                customVisible: { type: 'f', value: [] },\n                customAngle: { type: 'f', value: [] },\n                customSize: { type: 'f', value: [] },\n                customColor: { type: 'c', value: [] },\n                customOpacity: { type: 'f', value: [] }\n            },\n            vertexShader: particleVertexShader,\n            fragmentShader: particleFragmentShader,\n            transparent: true, // alphaTest: 0.5,  // if having transparency issues, try including: alphaTest: 0.5, \n            blending: THREE.NormalBlending, depthTest: true,\n\n        });\n    this.particleMesh = new THREE.Mesh();\n}\n\nParticleEngine.prototype.setValues = function (parameters) {\n    if (parameters === undefined) return;\n\n    // clear any previous tweens that might exist\n    this.sizeTween = new Tween();\n    this.colorTween = new Tween();\n    this.opacityTween = new Tween();\n\n    for (var key in parameters)\n        this[key] = parameters[key];\n\n    // attach tweens to particles\n    Particle.prototype.sizeTween = this.sizeTween;\n    Particle.prototype.colorTween = this.colorTween;\n    Particle.prototype.opacityTween = this.opacityTween;\n\n    // calculate/set derived particle engine values\n    this.particleArray = [];\n    this.emitterAge = 0.0;\n    this.emitterAlive = true;\n    this.particleCount = this.particlesPerSecond * Math.min(this.particleDeathAge, this.emitterDeathAge);\n\n    this.particleGeometry = new THREE.Geometry();\n    this.particleMaterial = new THREE.ShaderMaterial(\n        {\n            uniforms:\n            {\n                texture: { type: \"t\", value: this.particleTexture },\n            },\n            attributes:\n            {\n                customVisible: { type: 'f', value: [] },\n                customAngle: { type: 'f', value: [] },\n                customSize: { type: 'f', value: [] },\n                customColor: { type: 'c', value: [] },\n                customOpacity: { type: 'f', value: [] }\n            },\n            vertexShader: particleVertexShader,\n            fragmentShader: particleFragmentShader,\n            transparent: true, alphaTest: 0.5, // if having transparency issues, try including: alphaTest: 0.5, \n            blending: THREE.NormalBlending, depthTest: true\n        });\n    this.particleMesh = new THREE.ParticleSystem();\n}\n\n// helper functions for randomization\nParticleEngine.prototype.randomValue = function (base, spread) {\n    return base + spread * (Math.random() - 0.5);\n}\nParticleEngine.prototype.randomVector3 = function (base, spread) {\n    var rand3 = new THREE.Vector3(Math.random() - 0.5, Math.random() - 0.5, Math.random() - 0.5);\n    return new THREE.Vector3().addVectors(base, new THREE.Vector3().multiplyVectors(spread, rand3));\n}\n\n\nParticleEngine.prototype.createParticle = function () {\n    var particle = new Particle();\n\n    if (this.positionStyle == Type.CUBE)\n        particle.position = this.randomVector3(this.positionBase, this.positionSpread);\n    if (this.positionStyle == Type.SPHERE) {\n        var z = 2 * Math.random() - 1;\n        var t = 6.2832 * Math.random();\n        var r = Math.sqrt(1 - z * z);\n        var vec3 = new THREE.Vector3(r * Math.cos(t), r * Math.sin(t), z);\n        particle.position = new THREE.Vector3().addVectors(this.positionBase, vec3.multiplyScalar(this.positionRadius));\n    }\n\n    if (this.velocityStyle == Type.CUBE) {\n        particle.velocity = this.randomVector3(this.velocityBase, this.velocitySpread);\n    }\n    if (this.velocityStyle == Type.SPHERE) {\n        var direction = new THREE.Vector3().subVectors(particle.position, this.positionBase);\n        var speed = this.randomValue(this.speedBase, this.speedSpread);\n        particle.velocity = direction.normalize().multiplyScalar(speed);\n    }\n\n    particle.acceleration = this.randomVector3(this.accelerationBase, this.accelerationSpread);\n\n    particle.angle = this.randomValue(this.angleBase, this.angleSpread);\n    particle.angleVelocity = this.randomValue(this.angleVelocityBase, this.angleVelocitySpread);\n    particle.angleAcceleration = this.randomValue(this.angleAccelerationBase, this.angleAccelerationSpread);\n\n    particle.size = this.randomValue(this.sizeBase, this.sizeSpread);\n\n    var color = this.randomVector3(this.colorBase, this.colorSpread);\n    particle.color = new THREE.Color().setHSL(color.x, color.y, color.z);\n\n    particle.opacity = this.randomValue(this.opacityBase, this.opacitySpread);\n\n    particle.age = 0;\n    particle.alive = 0; // particles initialize as inactive\n\n    return particle;\n}\n\nParticleEngine.prototype.initialize = function () {\n    // link particle data with geometry/material data\n    for (var i = 0; i < this.particleCount; i++) {\n        // remove duplicate code somehow, here and in update function below.\n        this.particleArray[i] = this.createParticle();\n        this.particleGeometry.vertices[i] = this.particleArray[i].position;\n        this.particleMaterial.attributes.customVisible.value[i] = this.particleArray[i].alive;\n        this.particleMaterial.attributes.customColor.value[i] = this.particleArray[i].color;\n        this.particleMaterial.attributes.customOpacity.value[i] = this.particleArray[i].opacity;\n        this.particleMaterial.attributes.customSize.value[i] = this.particleArray[i].size;\n        this.particleMaterial.attributes.customAngle.value[i] = this.particleArray[i].angle;\n    }\n\n    this.particleMaterial.blending = this.blendStyle;\n    if (this.blendStyle != THREE.NormalBlending)\n        this.particleMaterial.depthTest = false;\n\n    this.particleMesh = new THREE.ParticleSystem(this.particleGeometry, this.particleMaterial);\n    this.particleMesh.dynamic = true;\n    this.particleMesh.sortParticles = true;\n    scene.add(this.particleMesh);\n}\n\nParticleEngine.prototype.update = function (dt) {\n    var recycleIndices = [];\n\n    // update particle data\n    for (var i = 0; i < this.particleCount; i++) {\n        if (this.particleArray[i].alive) {\n            this.particleArray[i].update(dt);\n\n            // check if particle should expire\n            // could also use: death by size<0 or alpha<0.\n            if (this.particleArray[i].age > this.particleDeathAge) {\n                this.particleArray[i].alive = 0.0;\n                recycleIndices.push(i);\n            }\n            // update particle properties in shader\n            this.particleMaterial.attributes.customVisible.value[i] = this.particleArray[i].alive;\n            this.particleMaterial.attributes.customColor.value[i] = this.particleArray[i].color;\n            this.particleMaterial.attributes.customOpacity.value[i] = this.particleArray[i].opacity;\n            this.particleMaterial.attributes.customSize.value[i] = this.particleArray[i].size;\n            this.particleMaterial.attributes.customAngle.value[i] = this.particleArray[i].angle;\n        }\n    }\n\n    // check if particle emitter is still running\n    if (!this.emitterAlive) return;\n\n    // if no particles have died yet, then there are still particles to activate\n    if (this.emitterAge < this.particleDeathAge) {\n        // determine indices of particles to activate\n        var startIndex = Math.round(this.particlesPerSecond * (this.emitterAge + 0));\n        var endIndex = Math.round(this.particlesPerSecond * (this.emitterAge + dt));\n        if (endIndex > this.particleCount)\n            endIndex = this.particleCount;\n\n        for (var i = startIndex; i < endIndex; i++)\n            this.particleArray[i].alive = 1.0;\n    }\n\n    // if any particles have died while the emitter is still running, we imediately recycle them\n    for (var j = 0; j < recycleIndices.length; j++) {\n        var i = recycleIndices[j];\n        this.particleArray[i] = this.createParticle();\n        this.particleArray[i].alive = 1.0; // activate right away\n        this.particleGeometry.vertices[i] = this.particleArray[i].position;\n    }\n\n    // stop emitter?\n    this.emitterAge += dt;\n    if (this.emitterAge > this.emitterDeathAge) this.emitterAlive = false;\n}\n\nParticleEngine.prototype.destroy = function () {\n    scene.remove(this.particleMesh);\n}\n///////////////////////////////////////////////////////////////////////////////"]}